# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import polls_pb2 as polls__pb2
import users_pb2 as users__pb2


class PollsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPolls = channel.unary_unary(
                '/Polls/GetPolls',
                request_serializer=users__pb2.Empty.SerializeToString,
                response_deserializer=polls__pb2.GetPollsReply.FromString,
                )
        self.CreatePoll = channel.unary_unary(
                '/Polls/CreatePoll',
                request_serializer=polls__pb2.PollRequest.SerializeToString,
                response_deserializer=polls__pb2.Poll.FromString,
                )
        self.DeletePoll = channel.unary_unary(
                '/Polls/DeletePoll',
                request_serializer=polls__pb2.PollRequest.SerializeToString,
                response_deserializer=users__pb2.Empty.FromString,
                )
        self.Vote = channel.unary_unary(
                '/Polls/Vote',
                request_serializer=polls__pb2.PollRequest.SerializeToString,
                response_deserializer=users__pb2.Empty.FromString,
                )
        self.Unvote = channel.unary_unary(
                '/Polls/Unvote',
                request_serializer=polls__pb2.PollRequest.SerializeToString,
                response_deserializer=users__pb2.Empty.FromString,
                )
        self.GetPollsVotedByUser = channel.unary_unary(
                '/Polls/GetPollsVotedByUser',
                request_serializer=users__pb2.User.SerializeToString,
                response_deserializer=polls__pb2.GetPollsReply.FromString,
                )
        self.GetUserPolls = channel.unary_unary(
                '/Polls/GetUserPolls',
                request_serializer=users__pb2.User.SerializeToString,
                response_deserializer=polls__pb2.GetPollsReply.FromString,
                )


class PollsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPolls(self, request, context):
        """retorna todas as enquetes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePoll(self, request, context):
        """cria uma enquete
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePoll(self, request, context):
        """delete uma enquete
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Vote(self, request, context):
        """Vota em uma enquete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unvote(self, request, context):
        """remove um voto de uma enquete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPollsVotedByUser(self, request, context):
        """retorna todas as enquetes nas quais um usuário votou
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPolls(self, request, context):
        """retorna todas as enquetes criadas por um usuário.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PollsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPolls': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolls,
                    request_deserializer=users__pb2.Empty.FromString,
                    response_serializer=polls__pb2.GetPollsReply.SerializeToString,
            ),
            'CreatePoll': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePoll,
                    request_deserializer=polls__pb2.PollRequest.FromString,
                    response_serializer=polls__pb2.Poll.SerializeToString,
            ),
            'DeletePoll': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePoll,
                    request_deserializer=polls__pb2.PollRequest.FromString,
                    response_serializer=users__pb2.Empty.SerializeToString,
            ),
            'Vote': grpc.unary_unary_rpc_method_handler(
                    servicer.Vote,
                    request_deserializer=polls__pb2.PollRequest.FromString,
                    response_serializer=users__pb2.Empty.SerializeToString,
            ),
            'Unvote': grpc.unary_unary_rpc_method_handler(
                    servicer.Unvote,
                    request_deserializer=polls__pb2.PollRequest.FromString,
                    response_serializer=users__pb2.Empty.SerializeToString,
            ),
            'GetPollsVotedByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPollsVotedByUser,
                    request_deserializer=users__pb2.User.FromString,
                    response_serializer=polls__pb2.GetPollsReply.SerializeToString,
            ),
            'GetUserPolls': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPolls,
                    request_deserializer=users__pb2.User.FromString,
                    response_serializer=polls__pb2.GetPollsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Polls', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Polls(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPolls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/GetPolls',
            users__pb2.Empty.SerializeToString,
            polls__pb2.GetPollsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePoll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/CreatePoll',
            polls__pb2.PollRequest.SerializeToString,
            polls__pb2.Poll.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePoll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/DeletePoll',
            polls__pb2.PollRequest.SerializeToString,
            users__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/Vote',
            polls__pb2.PollRequest.SerializeToString,
            users__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unvote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/Unvote',
            polls__pb2.PollRequest.SerializeToString,
            users__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPollsVotedByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/GetPollsVotedByUser',
            users__pb2.User.SerializeToString,
            polls__pb2.GetPollsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserPolls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Polls/GetUserPolls',
            users__pb2.User.SerializeToString,
            polls__pb2.GetPollsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
